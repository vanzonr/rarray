//
// rarray - Runtime arrays: template classes for pointer-based,
//          runtime, reference counted, multi-dimensional
//          arrays.  Documentation in rarraydoc.pdf
//
// Copyright (c) 2013-2023  Ramses van Zon
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#ifndef RARRAY_H
#define RARRAY_H

#if __cplusplus >= 201103L

//begin #include "versionheader.h"
#define RA_VERSION "v2.6.0"
#define RA_VERSION_NUMBER 2006000

//end #include "versionheader.h"

//begin #include "rarraymacros.h"
#ifndef _RARRAYMACROSH_
#define _RARRAYMACROSH_

#ifdef RA_BOUNDSCHECK
#include <string>
#define RA_CHECKORSAY(a, b) if (not(a)) throw std::out_of_range(std::string(b) + " in function " + std::string(__PRETTY_FUNCTION__) + " (rarray:" + std::to_string(__LINE__) + ")")
#define RA_NOEXCEPT(x)
#define noboundscheck false
#else
#define RA_CHECKORSAY(a, b)
#define RA_NOEXCEPT(x) noexcept(x)
#define noboundscheck true
#endif

#if ! defined(RA_FORCE_inline)
# if defined(_MSC_VER)
#  if _MSC_VER >= 1900
#   define RA_FORCE_inline [[msvc::forceinline]] inline
#  else
#   define RA_FORCE_inline __forceinline inline
#  endif
# elif defined(__INTEL_COMPILER)
#  define RA_FORCE_inline  __forceinline inline
# elif defined(__clang__)
#  if __clang_major__ < 3 || (__clang_major__ == 3 && __clang_minor__ < 3)
#   define RA_FORCE_inline __attribute__((always_inline)) inline
#  else
#   define RA_FORCE_inline [[gnu::always_inline]] inline
#  endif
# elif defined(__GNUC__)
#  if __GNUC__ < 4 || (GNU_C == 4 && __GNUC_MINOR < 8)
#   define RA_FORCE_inline __attribute__((always_inline)) inline
#  else
#   define RA_FORCE_inline [[gnu::always_inline]] inline
#  endif
# else
#  define RA_FORCE_inline inline
# endif
#endif

#endif

//end #include "rarraymacros.h"

//begin #include "rarraytypes.h"

#ifndef _RARRAYTYPESH_
#define _RARRAYTYPESH_

#include <string>

namespace ra {
    typedef ssize_t size_type;
    typedef ssize_t index_type;
    typedef int rank_type;
}

#endif

//end #include "rarraytypes.h"

//begin #include "shared_buffer.h"

#ifndef SHAREDBUFFERH
#define SHAREDBUFFERH

//#include "rarraymacros.h" was already done above
//#include "rarraytypes.h" was already done above
#include <cstddef>
#include <algorithm>
#include <stdexcept>
#include <memory>
#include <cstring>
#include <atomic>


namespace ra {
namespace detail {

template<class T>
class shared_buffer
{
  public:

    typedef ra::size_type size_type;

    shared_buffer() noexcept
    {
        uninit();
    }
    explicit shared_buffer(size_type asize)
    : data_(nullptr), orig_(nullptr), size_(0), refs_(nullptr)
    {
        auto to_be_data = std::unique_ptr<T[]>(new T[asize]);
        refs_ = new std::atomic<int>(1);
        data_ = to_be_data.release();
        orig_ = data_;
        size_ = asize;
    }
    shared_buffer(size_type asize, T* adata) RA_NOEXCEPT(true)
    : data_(adata), orig_(nullptr), size_(asize), refs_(nullptr)
    {
        RA_CHECKORSAY(adata, "nullptr given as data");
    }
    shared_buffer(const shared_buffer& other) noexcept
    : data_(other.data_), orig_(other.orig_), size_(other.size_), refs_(other.refs_)
    {
        incref();
    }
    shared_buffer(shared_buffer&& from) noexcept
    : data_(from.data_), orig_(from.orig_), size_(from.size_), refs_(from.refs_)
    {
        from.uninit();
    }

    shared_buffer& operator=(const shared_buffer& other) noexcept {
        if (this != &other) {
            decref();
            data_ = other.data_;
            orig_ = other.orig_;
            size_ = other.size_;
            refs_ = other.refs_;
            incref();
        }
        return *this;
    }
    void operator=(shared_buffer&& from) noexcept {
        decref();
        data_ = from.data_;
        orig_ = from.orig_;
        size_ = from.size_;
        refs_ = from.refs_;
        from.uninit();
    }

    ~shared_buffer() noexcept {
        decref();
    }

    const T& operator[](size_type index) const RA_NOEXCEPT(true) {
        RA_CHECKORSAY(index >= 0 and index < size(), "element not in buffer");
        return data_[index];
    }
    T& operator[](size_type index) RA_NOEXCEPT(true) {
        RA_CHECKORSAY(index >= 0 and index < size(), "element not in buffer");
        return data_[index];
    }

    const T& at(size_type index) const {
        if (index < 0 or index >= size_)
            throw std::out_of_range("shared_buffer::at");
        return data_[index];
    }
    T& at(size_type index) {
        if (index < 0 or index >= size_)
            throw std::out_of_range("shared_buffer::at");
        return data_[index];
    }

    shared_buffer<T> slice(size_type from, size_type to) {
        if (from < 0 or to < 0 or from > size_ or to > size_)
            throw std::out_of_range("shared_buffer::slice");
        shared_buffer<T> result(*this);
        result.data_ += from;
        result.size_ = 0;
        if (from <= to)
            result.size_ = to - from;
        return result;
    }
    const shared_buffer<T> slice(size_type from, size_type to) const {
        if (from < 0 or to < 0 or from > size_ or to > size_)
            throw std::out_of_range("shared_buffer::slice");
        shared_buffer<T> result(*this);
        result.data_ += from;
        result.size_ = 0;
        if (from <= to)
            result.size_ = to - from;
        return result;
    }

    size_type size() const noexcept {
        return size_;
    }

    shared_buffer<T> copy() const {
        return shared_buffer<T>(size_,cbegin(), cend());
    }

    typedef T* iterator;
    typedef const T* const_iterator;
    iterator begin() noexcept {
        return data_;
    }
    iterator end() noexcept {
        return data_+size_;
    }
    const_iterator begin() const noexcept {
        return data_;
    }
    const_iterator end() const noexcept {
        return data_+size_;
    }
    const_iterator cbegin() const noexcept {
        return data_;
    }
    const_iterator cend() const noexcept {
        return data_+size_;
    }

    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    reverse_iterator rbegin() {
        return std::reverse_iterator<iterator>(data_+size_);
    }
    reverse_iterator rend() {
        return std::reverse_iterator<iterator>(data_);
    }
    const_reverse_iterator rbegin() const {
        return std::reverse_iterator<const_iterator>(data_+size_);
    }
    const_reverse_iterator rend() const {
        return std::reverse_iterator<const_iterator>(data_);
    }
    const_reverse_iterator crbegin() const  {
        return std::reverse_iterator<const_iterator>(data_+size_);
    }
    const_reverse_iterator crend() const {
        return std::reverse_iterator<const_iterator>(data_);
    }

    void resize(size_type newsize, bool keep_content = false) {
        if ( (newsize<size_) and (refs_) and (*refs_)==1) {
                size_ = newsize;
        } else {
            std::atomic<int>* newrefs = new std::atomic<int>(1);
            T* newdata;
            try {
                newdata = new T[newsize];
            }
            catch (...) {
                delete newrefs;
                throw;
            }
            if (keep_content) {
                try {
                    size_type n = ((size_<newsize)?size_:newsize);
                    for (size_type i=0; i<n; i++)
                        newdata[i] = data_[i];
                }
                catch (...) {
                    delete newrefs;
                    delete[] newdata;
                    throw;
                }
            }
            decref();
            data_ = newdata;
            orig_ = newdata;
            size_ = newsize;
            refs_ = newrefs;
       }
    }

    void assign(const T& value) {
        for (size_type i = 0; i < size_; i++)
            data_[i] = value;
    }
    void assign(std::initializer_list<T> ilist) {
        assign_iter(ilist.begin(), ilist.end());
    }
    template<class InputIt>
    void assign_iter(InputIt first, InputIt last) {
        resize(last-first);
        T* data = data_;
        for (InputIt it = first; it != last; it++)
            *(data++) = *it;
    }

  private:

    T*        data_;
    T*        orig_;
    size_type size_;
    std::atomic<int>* refs_;

    void uninit() noexcept  {
        data_ = nullptr;
        orig_ = nullptr;
        size_ = 0;
        refs_ = nullptr;
    }
    void incref() noexcept  {
        if (refs_)
            (*refs_)++;
    }
    void decref() noexcept {
        if (refs_) {
            if (--(*refs_) == 0) {
                delete[] orig_;
                delete refs_;
                uninit();
            }
        }
    }

    template<typename InputIt>
    shared_buffer(size_type asize, InputIt first, InputIt last)
    : data_(nullptr), orig_(nullptr), size_(0), refs_(nullptr)
    {
        using noconstT = typename std::remove_const<T>::type;
        #ifndef __ibmxl__
        auto to_be_data = std::unique_ptr<T[]>(new T[asize]{*first});
	#else

	auto to_be_data	= std::unique_ptr<T[]>(const_cast<T*>(new typename std::remove_const<T>::type[asize]));
	#endif
        std::copy(first, last, const_cast<noconstT*>(to_be_data.get()));
        refs_ = new std::atomic<int>(1);
        data_ = to_be_data.release();
        orig_ = data_;
        size_ = asize;
     }

};

}
}

#endif

//end #include "shared_buffer.h"

//begin #include "shared_shape.h"

#ifndef SHARED_SHAPEH
#define SHARED_SHAPEH

//#include "rarraymacros.h" was already done above
//#include "rarraytypes.h" was already done above
//begin #include "offsets.h"
#ifndef OFFSETSH
#define OFFSETSH

//#include "rarraymacros.h" was already done above
//#include "rarraytypes.h" was already done above
#include <cstdlib>
#include <vector>
#include <type_traits>

namespace ra {
namespace detail {

class Offsets
{
  public:
    inline Offsets(const std::vector<index_type>& extent)
    {
        rank_ = static_cast<rank_type>(extent.size());
        size_type noffsets = 0;
        ndataoffsets_ = 0;
        if (rank_ > 0) {
            ndataoffsets_ = 1;
            for (rank_type i = rank_ - 1; i--; )
                noffsets = extent[i]*(1 + noffsets);
            for (rank_type i = 0 ; i < rank_-1; i++ )
                ndataoffsets_ *= extent[i];
            offsets_.reserve(noffsets);
            offsets_.resize(noffsets);
            if (noffsets > 1) {
                size_type offsetnum = 0;
                size_type extenttot = extent[0];
                for (rank_type i = 1; i < rank_ - 1; i++) {
                    for (size_type j = 0; j < extenttot; j++)
                        offsets_[offsetnum+j] = offsetnum + extenttot + j*extent[i];
                    offsetnum += extenttot;
                    extenttot *= extent[i];
                }
                ndataoffsets_ = extenttot;
                for (index_type j = 0; j < ndataoffsets_; j++)
                   offsets_[offsetnum + j] = j*extent[rank_ - 1];
            }
        }
    }
    template<class T> inline
    void*** apply_offsets(T* data) const
    {
        static_assert(sizeof(T*) == sizeof(void*) &&
                      sizeof(T*) == sizeof(void**),
                      "rarray's Offsets requires all pointers to have the same size");
        size_type noffsets = offsets_.size();
        if (ndataoffsets_ == 0 && noffsets == 0)
            return nullptr;
        else if (ndataoffsets_ == 1 && noffsets == 0)
            return reinterpret_cast<void***>(const_cast<typename std::remove_const<T>::type*>(data));
        else {
            void*** offsets = new void**[noffsets];
            size_type i = 0;
            for (;i < noffsets - ndataoffsets_; i++)
                offsets[i] = reinterpret_cast<void**>(offsets) + offsets_[i];
            for (;i < noffsets; i++)
                offsets[i] = reinterpret_cast<void**>(
                                  const_cast<typename std::remove_const<T>::type*>(data)
                                  + offsets_[i]);
            return offsets;
        }
    }
    inline size_type get_num_data_offsets() const noexcept
    {
        return ndataoffsets_;
    }
    inline size_type get_num_offsets() const noexcept
    {
        return offsets_.size();
    }
    inline rank_type get_rank() const noexcept
    {
        return rank_;
    }

  private:
    rank_type rank_;
    std::vector<unsigned long long> offsets_;
    size_type ndataoffsets_;
};

}}

#endif

//end #include "offsets.h"

#include <array>
#include <stdexcept>
#include <memory>
#include <atomic>


namespace ra {
namespace detail {


template<typename T,rank_type R>
struct PointerArray {
    typedef typename PointerArray<T,R-1>::type const*    type;
    typedef typename PointerArray<T,R-1>::noconst_type*  noconst_type;
};
template<typename T>
struct PointerArray<T,1> {
    typedef T* type;
    typedef T* noconst_type;
};
template<typename T>
struct PointerArray<T,0> {
    typedef T& type;
    typedef T& noconst_type;
};

template<class T, rank_type R>
struct _data_from_ptrs_noffsets_ndataoffsets;

template<class T, rank_type R>
class shared_shape
{
  public:

    typedef typename PointerArray<T,R>::type ptrs_type;
    typedef ra::size_type size_type;

    shared_shape() noexcept {
        uninit();
    }
    shared_shape(const std::array<size_type,R>&anextent, T*adata)
    : extent_(anextent), ptrs_(nullptr), refs_(nullptr), orig_(nullptr)
    {
        ra::detail::Offsets P({extent_.begin(),extent_.end()});
        auto to_be_orig = std::unique_ptr<void**[]>(P.apply_offsets(adata));
        if (R>1)
            refs_ = new std::atomic<int>(1);
        orig_ = to_be_orig.release();
        ptrs_ = reinterpret_cast<ptrs_type>(orig_);
        if (R==1)
            orig_ = nullptr;
        noffsets_ = P.get_num_offsets();
        ndataoffsets_ = P.get_num_data_offsets();
    }
    shared_shape(const shared_shape& other) noexcept
    : extent_(other.extent_), ptrs_(other.ptrs_), refs_(other.refs_), orig_(other.orig_),
      noffsets_(other.noffsets_), ndataoffsets_(other.ndataoffsets_)
    {
        incref();
    }
    shared_shape(shared_shape&& other) noexcept
    : extent_(other.extent_), ptrs_(other.ptrs_), refs_(other.refs_), orig_(other.orig_),
      noffsets_(other.noffsets_), ndataoffsets_(other.ndataoffsets_)
    {
        other.uninit();
    }

    shared_shape& operator=(const shared_shape& other) noexcept
    {
        if (this != &other) {
            decref();
            extent_       = other.extent_;
            ptrs_         = other.ptrs_;
            refs_         = other.refs_;
            orig_         = other.orig_;
            noffsets_     = other.noffsets_;
            ndataoffsets_ = other.ndataoffsets_;
            incref();
        }
        return *this;
}
    void operator=(shared_shape&& other) noexcept
    {
        decref();
        extent_       = other.extent_;
        ptrs_         = other.ptrs_;
        refs_         = other.refs_;
        orig_         = other.orig_;
        noffsets_     = other.noffsets_;
        ndataoffsets_ = other.ndataoffsets_;
        other.uninit();
    }

    ~shared_shape() {
        decref();
    }

    shared_shape copy() const {
        shared_shape copy_of_this;
        copy_of_this.extent_ = extent_;
        copy_of_this.noffsets_ = noffsets_;
        copy_of_this.ndataoffsets_ = ndataoffsets_;
        if (R>1) {
            copy_of_this.refs_ = new std::atomic<int>(1);
            copy_of_this.orig_ = new void**[noffsets_];
            using noconstT = typename std::remove_const<T>::type;
            void*** old_eff_orig = reinterpret_cast<void***>(
                                       const_cast<typename PointerArray<noconstT,R>::noconst_type>(
                                         ptrs_ ));
            std::copy(old_eff_orig, old_eff_orig + noffsets_, copy_of_this.orig_);
            std::ptrdiff_t shift = reinterpret_cast<char*>(copy_of_this.orig_)
                                   - reinterpret_cast<char*>(old_eff_orig);
            for (size_type i = 0; i < noffsets_ - ndataoffsets_; i++)
                copy_of_this.orig_[i] = reinterpret_cast<void**>(reinterpret_cast<char*>(copy_of_this.orig_[i]) + shift);
            copy_of_this.ptrs_ = reinterpret_cast<ptrs_type>(copy_of_this.orig_);
        } else {
            copy_of_this.ptrs_ = ptrs_;
      }
      return copy_of_this;

    }

    void relocate(T* newdata) {
        if (R==1) {
            ptrs_ = reinterpret_cast<ptrs_type>(newdata);
        } else if (R>1) {
            std::ptrdiff_t shift = reinterpret_cast<const char*>(newdata) - reinterpret_cast<const char*>(data());
            if (shift != 0) {
                copy_before_write();
                for (size_type i = noffsets_ - ndataoffsets_; i < noffsets_; i++)
                    orig_[i] = reinterpret_cast<void**>(reinterpret_cast<char*>(orig_[i]) + shift);
            }
        }
    }
    void reshape(const std::array<size_type,R>&newextent) {
        if (newextent != extent_) {
            *this = shared_shape<T,R>(newextent, data());
        }
    }

    ptrs_type ptrs() const noexcept {
        return ptrs_;
    }
    T* data() const noexcept {
        return _data_from_ptrs_noffsets_ndataoffsets<T,R>::call(ptrs_,noffsets_,ndataoffsets_);
    }
    size_type size() const noexcept {
        return ndataoffsets_ * extent_[R-1];
    }
    size_type extent(rank_type i) const {
        if (i < 0 or i >= R)
            throw std::out_of_range("shared_shape::extent(int)");
        return extent_[i];
    }
    const std::array<size_type,R>& extent() const noexcept {
            return extent_;
    }
    shared_shape<T,R-1> at(size_type index) const {
        if (R < 1 or index < 0 or index >= extent_[0])
            throw std::out_of_range("shared_shape::at");
        shared_shape<T,R-1> result;
        if (R>1) {
            for (rank_type i = 0; i < R-1; ++i)
                result.extent_[i] = extent_[i+1];
            result.ptrs_         = ptrs_[index];
            result.refs_         = refs_;
            result.orig_         = orig_;
            result.noffsets_     = noffsets_/extent_[0] - 1;
            result.ndataoffsets_ = ndataoffsets_/extent_[0];
            incref();
        }
        return result;
    }

  private:

    std::array<size_type,R> extent_;
    ptrs_type ptrs_;
    std::atomic<int>* refs_;
    void***   orig_;
    size_type noffsets_;
    size_type ndataoffsets_;

    void uninit() noexcept {
        ptrs_         = nullptr;
        orig_         = nullptr;
        refs_         = nullptr;
        noffsets_     = 0;
        ndataoffsets_ = 0;
        extent_.fill(0);
    }
    void incref() const noexcept {
        if (refs_)
            (*refs_)++;
    }
    void decref() noexcept {
        if (refs_) {
            if (--(*refs_) == 0) {
                if (R>1)
                    delete[] orig_;
                delete refs_;
                uninit();
            }
        }
    }

    void copy_before_write() {
        if (R > 1 and refs_ and *refs_ > 1)
            *this = this->copy();
    }

    template<class U, int S> friend class shared_shape;

};

template<typename T>
class shared_shape<T,0> {
  public:
    typedef T ptrs_type;
    typedef ra::size_type size_type;
  private:
    std::array<size_type,0> extent_;
    ptrs_type ptrs_;
    std::atomic<int>* refs_;
    void***   orig_;
    size_type noffsets_;
    size_type ndataoffsets_;
    void incref() const noexcept {}
    template<class U, int S> friend class shared_shape;
};

template<class T, rank_type R>
struct _data_from_ptrs_noffsets_ndataoffsets {
    static
    T* call(typename PointerArray<T,R>::type ptrs,
            typename shared_shape<T,R>::size_type noffsets,
            typename shared_shape<T,R>::size_type ndataoffsets)noexcept
    {
        return reinterpret_cast<T*>(
                  const_cast<typename PointerArray<T,R-1>::noconst_type>(
                    ptrs[noffsets - ndataoffsets]
                  )
               );
    }
};

template<class T>
struct _data_from_ptrs_noffsets_ndataoffsets<T,1> {
    static T* call (typename PointerArray<T,1>::type ptrs,
                    typename shared_shape<T,1>::size_type noffsets,
                    typename shared_shape<T,1>::size_type ndataoffsets)noexcept
    {
        return reinterpret_cast<T*>(ptrs);
    }
};

}
}

#endif

//end #include "shared_shape.h"


#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <list>
#include <sstream>
#include <stdexcept>
#include <utility>

namespace ra {

enum class RESIZE { NO, ALLOWED };
template<typename T,rank_type R> class rarray;
namespace detail {
    template<typename T> class CommaOp;
    template<typename T,rank_type R,typename P> class _Bracket;
    template<typename T,rank_type R,typename P> class _ConstBracket;
    inline size_type mul(const size_type * x, std::size_t n) noexcept {
        size_type result = 1;
        for (std::size_t i=0;i<n;i++)
            result *= x[i];
        return result;
    }
    #define ExOp class
    template<typename T, rank_type R, ExOp AOP, typename A1, typename A2, typename A3> class Expr;
}

template<typename T,rank_type R>
class rarray {

  public:
    typedef T                                         value_type;
    typedef ssize_t                                   difference_type;
    typedef ssize_t                                   size_type;
    typedef T*                                        iterator;
    typedef const T*                                  const_iterator;
    typedef typename detail::PointerArray<T,R>::type         parray_t;
    typedef typename detail::PointerArray<T,R>::noconst_type noconst_parray_t;
    inline rarray()
    : buffer_(), shape_() {}
    template<rank_type R_=R,class=typename std::enable_if<R_==1>::type>
    inline explicit rarray(size_type n0)
    : buffer_(n0),
      shape_({n0}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==2>::type>
    inline rarray(size_type n0, size_type n1)
    : buffer_(n0*n1),
      shape_({n0,n1}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==3>::type>
    inline rarray(size_type n0, size_type n1, size_type n2)
    : buffer_(n0*n1*n2),
      shape_({n0,n1,n2}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==4>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3)
    : buffer_(n0*n1*n2*n3),
      shape_({n0,n1,n2,n3}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==5>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4)
    : buffer_(n0*n1*n2*n3*n4),
      shape_({n0,n1,n2,n3,n4}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==6>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5)
    : buffer_(n0*n1*n2*n3*n4*n5),
      shape_({n0,n1,n2,n3,n4,n5}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==7>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6)
    : buffer_(n0*n1*n2*n3*n4*n5*n6),
      shape_({n0,n1,n2,n3,n4,n5,n6}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==8>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==9>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==10>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8*n9),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9}, buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==11>::type>
    inline rarray(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9, size_type n10)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8*n9*n10),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10}, buffer_.begin())
    {}
    explicit inline rarray(const size_type* anextent)
    : buffer_(detail::mul(anextent,R)),
      shape_(reinterpret_cast<const std::array<size_type,R>&>(*anextent), buffer_.begin())
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==1>::type>
    inline rarray(T* buffer, size_type n0)
    : buffer_(n0,  buffer),
      shape_({n0}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==2>::type>
    inline rarray(T* buffer, size_type n0, size_type n1)
    : buffer_(n0*n1,  buffer),
      shape_({n0,n1}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==3>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2)
    : buffer_(n0*n1*n2,  buffer),
      shape_({n0,n1,n2}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==4>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3)
    : buffer_(n0*n1*n2*n3,  buffer),
      shape_({n0,n1,n2,n3}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==5>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4)
    : buffer_(n0*n1*n2*n3*n4,  buffer),
      shape_({n0,n1,n2,n3,n4}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==6>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5)
    : buffer_(n0*n1*n2*n3*n4*n5,  buffer),
      shape_({n0,n1,n2,n3,n4,n5}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==7>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6)
    : buffer_(n0*n1*n2*n3*n4*n5*n6,  buffer),
      shape_({n0,n1,n2,n3,n4,n5,n6}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==8>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7,  buffer),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==9>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8,  buffer),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==10>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8*n9,  buffer),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9}, buffer)
    {}
    template<rank_type R_=R,class=typename std::enable_if<R_==11>::type>
    inline rarray(T* buffer, size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9, size_type n10)
    : buffer_(n0*n1*n2*n3*n4*n5*n6*n7*n8*n9*n10,  buffer),
      shape_({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10}, buffer)
    {}
    inline rarray(T* buffer, const size_type* anextent)
    : buffer_(detail::mul(anextent,R), buffer),
      shape_(reinterpret_cast<const std::array<size_type,R>&>(*anextent), buffer)
    {}
    template<std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==1>::type>
    inline rarray(T (&a)[Z])
    : buffer_(Z, a),
      shape_({Z}, buffer_.begin())
    {}
    template<std::size_t Y, std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==2>::type>
    inline rarray(T (&a)[Y][Z])
    : buffer_(Y*Z, *a),
      shape_({Y,Z}, buffer_.begin())
    {}
    template<std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==3>::type>
    inline rarray(T (&a)[X][Y][Z])
    : buffer_(X*Y*Z, **a),
      shape_({X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==4>::type>
    inline rarray(T (&a)[W][X][Y][Z])
    : buffer_(W*X*Y*Z, ***a),
      shape_({W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==5>::type>
    inline rarray(T (&a)[V][W][X][Y][Z])
    : buffer_(V*W*X*Y*Z, ****a),
      shape_({V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==6>::type>
    inline rarray(T (&a)[U][V][W][X][Y][Z])
    : buffer_(U*V*W*X*Y*Z,  *****a),
      shape_({U,V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t T_,std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==7>::type>
    inline rarray(T (&a)[T_][U][V][W][X][Y][Z])
    : buffer_(T_*U*V*W*X*Y*Z,  ******a),
      shape_({T_,U,V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t S,std::size_t T_,std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==8>::type>
    inline rarray(T (&a)[S][T_][U][V][W][X][Y][Z])
    : buffer_(S*T_*U*V*W*X*Y*Z,  *******a),
      shape_({S,T_,U,V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t R_,std::size_t S,std::size_t T_,std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==9>::type>
    inline rarray(T (&a)[R_][S][T_][U][V][W][X][Y][Z])
    : buffer_(R_*S*T_*U*V*W*X*Y*Z,  ********a),
      shape_({R_,S,T_,U,V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t Q,std::size_t R_,std::size_t S,std::size_t T_,std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==10>::type>
    inline rarray(T (&a)[Q][R_][S][T_][U][V][W][X][Y][Z])
    : buffer_(Q*R_*S*T_*U*V*W*X*Y*Z,  *********a),
      shape_({Q,R_,S,T_,U,V,W,X,Y,Z}, buffer_.begin())
    {}
    template<std::size_t P,std::size_t Q,std::size_t R_,std::size_t S,std::size_t T_,std::size_t U,std::size_t V,std::size_t W,std::size_t X,std::size_t Y,std::size_t Z,
             rank_type R__=R,typename=typename std::enable_if<R__==11>::type>
    inline rarray(T (&a)[P][Q][R_][S][T_][U][V][W][X][Y][Z])
    : buffer_(P*Q*R_*S*T_*U*V*W*X*Y*Z,  **********a),
      shape_({P,Q,R_,S,T_,U,V,W,X,Y,Z}, buffer_.begin())
    {}
    RA_FORCE_inline rarray(const rarray<T,R> &a) noexcept
    : buffer_(a.buffer_),
      shape_(a.shape_)
    {}
    inline rarray<T,R>& operator=(const rarray<T,R> &a) noexcept {
        buffer_ = a.buffer_;
        shape_ = a.shape_;
        return *this;
    }
    rarray(rarray<T,R>&& x) noexcept
    : buffer_(std::move(x.buffer_)),
      shape_(std::move(x.shape_))
    {}
    rarray<T,R>& operator=(rarray<T,R>&& x) noexcept {
        buffer_ = std::move(x.buffer_);
        shape_ = std::move(x.shape_);
        return *this;
    }
    inline detail::CommaOp<T> operator=(const T& e) RA_NOEXCEPT(std::is_nothrow_copy_constructible<T>()) {
        RA_CHECKORSAY(not empty(), "assignment to unsized array");
        RA_CHECKORSAY(size()>0,"assignment with more elements than in array");
        T* first = &(buffer_[0]);
        if (size() > 0)
            *first = e;
        else
            return detail::CommaOp<T>(nullptr, nullptr);
        detail::CommaOp<T> co(first+1, first+size()-1);
        return co;
    }
    RA_FORCE_inline ~rarray() {}
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline explicit   rarray (const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator= (const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator+=(const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator-=(const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator*=(const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator/=(const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<ExOp AOP, typename A1, typename A2, typename A3> RA_FORCE_inline rarray& operator%=(const detail::Expr<T,R,AOP,A1,A2,A3>& e);
    template<rank_type R_=R,class=typename std::enable_if<R_==1>::type>
    inline void reshape(size_type n0, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0))
            shape_ = detail::shared_shape<T,R>({n0}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==2>::type>
    inline void reshape(size_type n0, size_type n1, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1))
            shape_ = detail::shared_shape<T,R>({n0,n1}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==3>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==4>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==5>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4}, buffer_.begin());
       else
           throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==6>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==7>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5*n6
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5*n6))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5,n6}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==8>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5*n6*n7
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5*n6*n7))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5,n6,n7}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==9>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5*n6*n7*n8
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5*n6*n7*n8))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5,n6,n7,n8}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==10>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5*n6*n7*n8*n9
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5*n6*n7*n8*n9))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    template<rank_type R_=R,class=typename std::enable_if<R_==11>::type>
    inline void reshape(size_type n0, size_type n1, size_type n2, size_type n3, size_type n4, size_type n5, size_type n6, size_type n7, size_type n8, size_type n9, size_type n10, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == n0*n1*n2*n3*n4*n5*n6*n7*n8*n9*n10
            or (resize_allowed == RESIZE::ALLOWED and size() >= n0*n1*n2*n3*n4*n5*n6*n7*n8*n9*n10))
            shape_ = detail::shared_shape<T,R>({n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10}, buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    inline void reshape(const size_type* newshape, RESIZE resize_allowed=RESIZE::NO) {
        if (size() == detail::mul(newshape,R)
            or (resize_allowed == RESIZE::ALLOWED and size() >= detail::mul(newshape,R)))
            shape_ = detail::shared_shape<T,R>((const std::array<size_type,R>&)(*newshape), buffer_.begin());
        else
            throw std::out_of_range(std::string("Incompatible dimensions in function ") + std::string(__PRETTY_FUNCTION__));
    }
    inline rarray<T,R> copy() const {
        rarray<T,R> clone;
        clone.buffer_ = buffer_.copy();
        clone.shape_ = shape_.copy();
        clone.shape_.relocate(clone.buffer_.begin());
        return clone;
    }
    operator const rarray<const T,R>&() const noexcept {
        return const_ref();
    }
    constexpr int rank() const noexcept {
        return R;
    }
    inline bool empty() const noexcept {
        return buffer_.cbegin() == nullptr;
    }
    inline size_type extent(int i) const {
        return shape_.extent(i);
    }
    RA_FORCE_inline const size_type* shape() const noexcept {
        return &(shape_.extent()[0]);
    }
    inline size_type size() const noexcept {
        return shape_.size();
    }
    inline T* data() noexcept {
        return buffer_.begin();
    }
    inline const T* data() const noexcept {
        return buffer_.begin();
    }
    inline parray_t ptr_array() const noexcept {
        return shape_.ptrs();
    }
    inline noconst_parray_t noconst_ptr_array() const noexcept {
        return const_cast<noconst_parray_t>(shape_.ptrs());
    }
    inline const rarray<const T,R>&  const_ref() const noexcept {
        return reinterpret_cast<const rarray<const T,R>&>(*this);
    }
    RA_FORCE_inline void clear() noexcept {
        shape_ = detail::shared_shape<T,R>();
        buffer_ = detail::shared_buffer<T>();
    }
    inline void fill(const T& value) {
        buffer_.assign(value);
    }
    inline iterator begin() noexcept {
        return buffer_.begin();
    }
    inline const_iterator begin() const noexcept {
        return buffer_.begin();
    }
    inline const_iterator cbegin() const noexcept {
        return buffer_.cbegin();
    }
    inline iterator end() noexcept {
        return buffer_.end();
    }
    inline const_iterator end() const noexcept {
        return buffer_.end();
    }
    inline const_iterator cend() const noexcept {
        return buffer_.cend();
    }
    inline size_type index(const T& a, int i) const {
        ptrdiff_t linearindex = &a - &(buffer_[0]);
        if (linearindex < 0 or linearindex >= size())
            throw ("element not in array");
        const size_type* extent_ = shape();
        for (int j = R-1; j > i; j--)
            linearindex /= extent_[j];
        return linearindex % extent_[i];
    }
    inline size_type index(const iterator& iter, int i) const {
        return index(*iter, i);
    }
    inline std::array<size_type,R> index(const T& a) const {
        std::array<size_type,R> ind;
        ptrdiff_t linearindex = &a - &(buffer_[0]);
        RA_CHECKORSAY(linearindex >=0 and linearindex < size(), "element not in array");
        int j = R;
        const size_type* extent_ = shape();
        while (j-->0) {
            ind[j] = linearindex % extent_[j];
            linearindex /= extent_[j];
        }
        return ind;
    }
    inline std::array<size_type,R> index(const iterator& i) const {
        return index(*i);
    }
    inline size_type* index(const T& a, size_type* ind) const {
        ptrdiff_t linearindex = &a - &(buffer_[0]);
        RA_CHECKORSAY(linearindex >= 0 and linearindex < size(), "element not in array");
        int j = R;
        const size_type* extent_ = shape();
        while (j-->0) {
            ind[j] = linearindex % extent_[j];
            linearindex /= extent_[j];
        }
        return ind;
    }
    inline size_type* index(const iterator& i, size_type* ind) const {
        return index(*i, ind);
    }
    template<class U=rarray<T,R-1>>
    RA_FORCE_inline typename std::enable_if<R!=1,U>::type at(size_type i) {
        if (i < 0 or i >= extent(0))
            throw std::out_of_range("rarray<T,R>::at");
        size_type stride = size()/extent(0);
        return ra::rarray<T,R-1>(buffer_.slice(i*stride, (i+1)*stride), shape_.at(i));
    }
    template<class U=T&>
    RA_FORCE_inline typename std::enable_if<R==1,U>::type at(size_type i) {
        if (i < 0 or i >= extent(0))
            throw std::out_of_range("rarray<T,R>::at");
        return shape_.ptrs()[i];
    }
    template<class U=const rarray<T,R-1>>
    RA_FORCE_inline typename std::enable_if<R!=1,U>::type at(size_type i) const {
        if (i < 0 or i >= extent(0))
            throw std::out_of_range("rarray<T,R>::at");
        size_type stride = size()/extent(0);
        return ra::rarray<T,R-1>(buffer_.slice(i*stride, (i+1)*stride), shape_.at(i));
    }
    template<class U=const T&>
    RA_FORCE_inline typename std::enable_if<R==1,U>::type at(size_type i) const {
        if (i < 0 or i >= extent(0))
            throw std::out_of_range("rarray<T,R>::at");
        return shape_.ptrs()[i];
    }
    template<class U=T>
    RA_FORCE_inline typename std::enable_if<R==1,
    U&
    >::type
    operator[](ssize_t index) {
        RA_CHECKORSAY(index >= 0 and index < extent(0), "index out of range of array");
        return buffer_.begin()[index];
    }
    template<class U=T>
    RA_FORCE_inline typename std::enable_if<R!=1,
    typename detail::_Bracket<U,R-1,rarray>
    >::type
    operator[](ssize_t index) {
        return { *this, index, this->shape() };
    }
    template<class U=T>
    RA_FORCE_inline
    typename std::enable_if<R==1,
    const U&
    >::type
    operator[](ssize_t index) const {
        RA_CHECKORSAY(index >= 0 and index < extent(0), "index out of range of array");
        return buffer_.cbegin()[index];
    }
    template<class U=T>
    RA_FORCE_inline typename std::enable_if<R!=1,
    typename detail::_ConstBracket<U,R-1,rarray>
    >::type
    operator[](ssize_t index) const {
        return { *this, index, this->shape() };
    }
    #if __cpp_multidimensional_subscript >= 202110L
    template<typename... Ts>
    RA_FORCE_inline typename std::enable_if<R==sizeof...(Ts)+1,T&>::type
    operator[](ssize_t index, Ts... args) {
        return operator[](index)[args...];
    }
    template<typename... Ts>
    RA_FORCE_inline typename std::enable_if<R==sizeof...(Ts)+1,const T&>::type
    operator[](ssize_t index, Ts... args) const {
        return operator[](index)[args...];
    }
    #endif
    RA_FORCE_inline const T& leval(size_type i) const;
  private:
    friend class detail::_Bracket<T,R-1,rarray<T,R>>;
    friend class detail::_ConstBracket<T,R-1,rarray<T,R>>;
    RA_FORCE_inline typename detail::PointerArray<T,R-1>::type _at(ssize_t index) {
        return shape_.ptrs()[index];
    }
    RA_FORCE_inline typename detail::PointerArray<T,R-1>::type _at(ssize_t index) const {
                return shape_.ptrs()[index];
    }
    friend class rarray<T,R+1>;
    inline rarray(detail::shared_buffer<T>&& abuffer, detail::shared_shape<T,R>&& ashape) :
        buffer_(std::forward<detail::shared_buffer<T>>(abuffer)),
        shape_(std::forward<detail::shared_shape<T,R>>(ashape))
    {}
    inline rarray(const detail::shared_buffer<T>&& abuffer, detail::shared_shape<T,R>&& ashape) :
        buffer_(std::forward<detail::shared_buffer<T>>(const_cast<detail::shared_buffer<T>&& >(abuffer))),
        shape_(std::forward<detail::shared_shape<T,R>>(ashape))
    {}
    detail::shared_buffer<T>  buffer_;
    detail::shared_shape<T,R> shape_;

};

namespace detail {
template<typename T>
class CommaOp {
  public:
    RA_FORCE_inline CommaOp& operator,(const T& e) {
        RA_CHECKORSAY(ptr_!=nullptr and last_!=nullptr, "invalid comma operator");
        RA_CHECKORSAY(ptr_<=last_, "assignment with more elements than in array");
        if (ptr_ and ptr_ <= last_)
            *ptr_++ = e;
        return *this;
    }
  private:
    RA_FORCE_inline CommaOp(T* ptr, T* last) RA_NOEXCEPT(true)
    : ptr_(ptr), last_(last)
    {
        RA_CHECKORSAY(ptr_!=nullptr and last_!=nullptr, "invalid comma operator");
    }
    T *ptr_;
    T * const last_;
    template<typename,int> friend class ra::rarray;
};

template<typename T,rank_type R,typename P>
class _Bracket {
  private:
    P&             parent_; // what array/array expre is being accessed
    ssize_t        index_;
    const ssize_t* shape_;
  public:
    RA_FORCE_inline _Bracket<T,R-1,_Bracket> operator[](ssize_t nextindex) noexcept(noboundscheck) {
        return { *this, nextindex, shape_ + 1 };
    }
    RA_FORCE_inline operator decltype(parent_.at(index_)) () {
        return parent_.at(index_);
    }
    _Bracket(const _Bracket&) = delete;
    _Bracket(const _Bracket&&) = delete;
    _Bracket& operator=(const _Bracket&) = delete;
    _Bracket& operator=(const _Bracket&&) = delete;
  private:
    RA_FORCE_inline _Bracket(P& parent, ssize_t index, const ssize_t* shape) noexcept(noboundscheck)
    : parent_(parent),
      index_(index),
      shape_(shape)
    {
        RA_CHECKORSAY(index >=0 and index_ < shape_[0], "index out of range of array");
    }
    RA_FORCE_inline auto _at(ssize_t nextindex) noexcept(noboundscheck) -> decltype(parent_._at(index_)[nextindex]) {
        return parent_._at(index_)[nextindex];
    }
    template<typename,int> friend class ra::rarray;
    template<typename,int,typename> friend class detail::_Bracket;
  public:
    RA_FORCE_inline auto at(ssize_t nextindex) -> decltype(parent_.at(index_).at(nextindex)) {
        return parent_.at(index_).at(nextindex);
    }
    #if __cpp_multidimensional_subscript >= 202110L
    template<typename... Ts>
    RA_FORCE_inline typename std::enable_if<R==sizeof...(Ts)+1,T&>::type
    operator[](ssize_t nextindex, Ts... args) {
        return operator[](nextindex)[args...];
    }
    #endif
};

template<typename T,typename P>
class _Bracket<T,1,P> {
  private:
    P&             parent_; // what array/array expression is being accessed
    ssize_t        index_;
    const ssize_t* shape_;
  public:
    RA_FORCE_inline T& operator[](ssize_t nextindex) noexcept(noboundscheck) {
        RA_CHECKORSAY(nextindex >=0 and nextindex < shape_[1], "index out of range of array");
        return parent_._at(index_)[nextindex];
    }
    RA_FORCE_inline operator decltype(parent_.at(index_)) () {
        return parent_.at(index);
    }
    _Bracket(const _Bracket&) = delete;
    _Bracket(const _Bracket&&) = delete;
    _Bracket& operator=(const _Bracket&) = delete;
    _Bracket& operator=(const _Bracket&&) = delete;
  private:
    RA_FORCE_inline _Bracket(P& parent, ssize_t index, const ssize_t* shape) noexcept(noboundscheck)
    : parent_(parent),
      index_(index),
      shape_(shape)
    {
        RA_CHECKORSAY(index >=0 and index_ < shape_[0], "index out of range of array");
    }
    template<typename,int> friend class ra::rarray;
    template<typename,int,typename> friend class detail::_Bracket;
  public:
    RA_FORCE_inline auto at(ssize_t nextindex) -> decltype(parent_.at(index_).at(nextindex)) {
        return parent_.at(index_).at(nextindex);
    }
};

template<typename T,rank_type R,typename P>
class _ConstBracket {
  private:
    const P&       parent_;
    ssize_t        index_;
  public:
    RA_FORCE_inline _ConstBracket<T,R-1,_ConstBracket> operator[](ssize_t nextindex) const noexcept(noboundscheck) {
        return { *this, nextindex, shape_ + 1 };
    }
    RA_FORCE_inline operator decltype(parent_.at(index_)) () {
        return parent_.at(index_);
    }
    _ConstBracket(const _ConstBracket&) = delete;
    _ConstBracket(const _ConstBracket&&) = delete;
    _ConstBracket& operator=(const _ConstBracket&) = delete;
    _ConstBracket& operator=(const _ConstBracket&&) = delete;
  private:
    const ssize_t* shape_;
    RA_FORCE_inline _ConstBracket(const P& parent, ssize_t index, const ssize_t* shape) noexcept(noboundscheck)
    : parent_(parent),
      index_(index),
      shape_(shape)
    {
        RA_CHECKORSAY(index >=0 and index_ < shape_[0], "index out of range of array");
    }
    RA_FORCE_inline auto _at(ssize_t nextindex) const noexcept(noboundscheck) -> decltype(parent_._at(index_)[nextindex]) {
        return parent_._at(index_)[nextindex];
    }
    template<typename,int> friend class ra::rarray;
    template<typename,int,typename> friend class detail::_ConstBracket;
  public:
    RA_FORCE_inline auto at(ssize_t nextindex) const -> decltype(parent_.at(index_).at(nextindex)) {
        return parent_.at(index_).at(nextindex);
    }
    #if __cpp_multidimensional_subscript >= 202110L
    template<typename... Ts>
    RA_FORCE_inline typename std::enable_if<R==sizeof...(Ts)+1,const T&>::type
    operator[](ssize_t nextindex, Ts... args) {
        return operator[](nextindex)[args...];
    }
    #endif
};

template<typename T,typename P>
class _ConstBracket<T,1,P> {
  private:
    const P&       parent_;
    ssize_t        index_;
  public:
    RA_FORCE_inline const T& operator[](ssize_t nextindex) const noexcept(noboundscheck) {
        RA_CHECKORSAY(nextindex >=0 and nextindex < shape_[1], "index out of range of array");
        return parent_._at(index_)[nextindex];
    }
    RA_FORCE_inline operator decltype(parent_.at(index_)) () {
        return parent_.at(index_);
    }
    _ConstBracket(const _ConstBracket&) = delete;
    _ConstBracket(const _ConstBracket&&) = delete;
    _ConstBracket& operator=(const _ConstBracket&) = delete;
    _ConstBracket& operator=(const _ConstBracket&&) = delete;
  private:
    const ssize_t* shape_;
    RA_FORCE_inline _ConstBracket(const P& parent, ssize_t index, const ssize_t* shape) noexcept(noboundscheck)
    : parent_(parent),
      index_(index),
      shape_(shape)
    {
        RA_CHECKORSAY(index >=0 and index_ < shape_[0], "index out of range of array");
    }
    template<typename,int> friend class ra::rarray;
    template<typename,int,typename> friend class detail::_ConstBracket;
  public:
    RA_FORCE_inline auto at(ssize_t nextindex) const -> decltype(parent_.at(index_).at(nextindex)) {
        return parent_.at(index_).at(nextindex);
    }
};
}
template<typename S>
inline
rarray<S,1> linspace(S x1, S x2, int n=0, bool end_incl=true)
{
    if (n==0) {
        if (x2>x1)
            n = static_cast<int>(x2 - x1 + end_incl);
        else
            n = static_cast<int>(x1 - x2 + end_incl);
    }
    rarray<S,1> x(n);
    for (int i = 0; i < n; i++)
        x[i] = x1 + static_cast<S>(((x2-x1)*static_cast<long long int>(i))/(n-end_incl));
    if (end_incl)
        x[n-1] = x2;
    return x;
}

template<class T>
class Xrange {
  private:
    struct const_iterator {
        typedef std::ptrdiff_t difference_type;
        typedef T value_type;
        typedef T* pointer;
        typedef T& reference;
        typedef std::input_iterator_tag iterator_category;
        inline const_iterator(): i_(0), di_(1), b_(0) {}
        inline const_iterator(T i, T di, T b): i_(i), di_(di), b_(b) {}
        inline bool operator!=(const const_iterator& other) const {
            return i_ != other.i_;
        }
        inline bool operator==(const const_iterator& other) const {
            return i_ == other.i_ && di_ == other.di_ && b_ == other.b_;
        }
        inline const_iterator& operator++() {
            i_+=di_;
            if (di_>0 && i_ >= b_)
               i_ = b_;
            if (di_<0 && i_ <= b_)
               i_ = b_;
            return *this;
        }
        inline const_iterator operator++(int) {
            const const_iterator temp = *this;
            this->operator++();
            return temp;
        }
        inline const T& operator*() const {
            return i_;
        }
        T i_, di_, b_;
    };
    T a_, b_, d_;
  public:
    inline Xrange(T a, T b, T d)
    : a_(a), b_(a + static_cast<T>(static_cast<T>(std::ceil(static_cast<double>(b-a)/static_cast<double>(d)))*d)), d_(d)
    {}
    inline const_iterator begin() const {
        return const_iterator(a_, d_, b_);
    }
    inline const const_iterator end() const {
        return const_iterator(b_, d_, b_);
    }
    inline size_t size() const {
        return static_cast<size_t>((b_-a_)/d_);
    }
};

template<class T>
inline Xrange<T> xrange(T end) {
    return Xrange<T>(static_cast<T>(0), end, static_cast<T>(1));
}

template<class S, class T>
inline Xrange<T> xrange(S begin, T end) {
    return Xrange<T>(static_cast<T>(begin), end, static_cast<T>(1));
}

template<class S, class T, class U>
inline Xrange<T> xrange(S begin, T end, U step) {
    return Xrange<T>(static_cast<T>(begin), end, static_cast<T>(step));
}

template<typename A>
size_type extent(const A &a, int i)
{
    switch (i) {
    case 0: return std::extent<A,0>();
    case 1: return std::extent<A,1>();
    case 2: return std::extent<A,2>();
    case 3: return std::extent<A,3>();
    case 4: return std::extent<A,4>();
    case 5: return std::extent<A,5>();
    case 6: return std::extent<A,6>();
    case 7: return std::extent<A,7>();
    case 8: return std::extent<A,8>();
    case 9: return std::extent<A,9>();
    case 10: return std::extent<A,10>();
    default: throw std::out_of_range("ra::extent"); return 0;
    }
}

template<typename T,rank_type R>
size_type extent(const rarray<T,R> &a, int i)
{
    return a.extent(i);
}

}

namespace std {
    template<typename T,ra::rank_type R>
    struct remove_all_extents<ra::rarray<T,R>> {
        typedef T type;
    };
    template<typename T,ra::rank_type R>
    struct rank<ra::rarray<T,R>> {
        static const size_t value = R;
    };
}

//begin #include "rarrayio.h"

//#include "rarraytypes.h" was already done above

namespace ra {
namespace detail {

template<typename T, rank_type R>
struct Deref {
    static inline T& access(typename PointerArray<T,R>::type p, const size_type* indices)
    {
        return Deref<T,R-1>::access(p[indices[0]-1], indices+1);
    }
};
template<typename T>
struct Deref<T,1>
{
    static inline T& access(typename PointerArray<T,1>::type p, const size_type* indices)
    {
        return p[indices[0]-1];
    }
};

template<typename T>
struct StringToValue {
    static inline void get(const std::string& input, T& output) {
        std::stringstream str(input);
        str >> output;
    }
};
template<>
struct StringToValue<std::string> {
    static inline void get(const std::string& input, std::string& output) {
        output = input;
    }
};

enum class token { BRACEOPEN, BRACECLOSE, COMMA, DATASTRING, END };

inline char toch(const token& Token) {
     switch (Token) {
     case token::BRACEOPEN:  return '{';
     case token::BRACECLOSE: return '}';
     case token::COMMA:      return ',';
     case token::DATASTRING: return '$';
     case token::END:        return '.';
     }
 }

template<typename T, rank_type R> inline
std::ostream& text_output(std::ostream &o, const rarray<T,R>& r)
{
    if (not r.empty()) {
        o << "{\n";
        for (size_type i=0; i<r.extent(0); i++)  {
            if (i>0)
                o << ",\n";
            o << r.at(i);
        }
        o << "\n}";
    } else {
        for (int i=0; i<R; i++)
            o << '{';
        for (int i=0; i<R; i++)
            o << '}';
        o << "\n";
    }
    return o;
}

template<typename T> inline
std::ostream& text_output(std::ostream &o, const rarray<T,1>& r)
{
    if (not r.empty()) {
        o << '{';
        for (size_type i=0; i<r.extent(0); i++) {
            if (i) o << ',';
            std::stringstream strstr;
            std::string result;
            const T& val = r.at(i);
            strstr << val;
            result = strstr.str();
            if (result.find_first_of("{,}#") != std::string::npos
                and not
                (result[0]=='(' and result[result.size()-1]==')' and result.substr(1,result.size()-2).find_first_of(")") == std::string::npos) )
                o << '#' << result.size() << ':';
            o << result;
        }
        o << '}';
    } else
        o << "{}";
    return o;
}


static inline char get_but_eat_newline(std::istream & in)
{
    char ch1='\n';
    while (ch1=='\n' && ! in.eof())
        in >> ch1;
    return ch1;
}

static inline char get_but_eat_whitespace(std::istream & in)
{
    char ch1;
    in >> ch1;
    return ch1;
}

template<rank_type R> inline
std::pair<std::list<std::pair<token,std::string>>,size_type[R]> parse_shape(std::istream & in)
{
    std::pair<std::list<std::pair<token,std::string>>,size_type[R]> wholeresult;
    std::list<std::pair<token,std::string>>& result = wholeresult.first;
    size_type* shape = wholeresult.second;
    size_t init_file_ptr = in.tellg();
    try {
        size_type current_shape[R];
        for (rank_type i=0; i<R; i++) {
            current_shape[i] = 1;
            shape[i] = 0;
            if (get_but_eat_newline(in) != '{')
                throw std::istream::failure("Format error");
            else
                result.push_back({token::BRACEOPEN,""});
        }
        int current_depth = R-1;
        while (current_depth>=0) {
            if (current_depth==R-1) {
                char         lastchar;
                std::string  word = "";
                do {
                    if (word=="") {
                        lastchar = get_but_eat_newline(in);
                    } else {
                        in.get(lastchar);
                    }
                    if (lastchar != ',' and lastchar != '}') {
                        word += lastchar;
                    }
                    if (word == "#") {
                        word="";
                        std::string skipstr;
                        do {
                            in.get(lastchar);
                            skipstr += lastchar;
                        } while (lastchar!=':');
                        int skip = atoi(skipstr.c_str());//
                        for (int i=0; i<skip; i++) { //
                            char nextchar;
                            in.get(nextchar);
                            word += nextchar;
                        }
                    } else if (word == "(") {
                        const int safeguardcount=1024*1024; //
                        int count=0; //
                        while (lastchar!=')' and count<safeguardcount) {
                            in.get(lastchar);
                            word += lastchar;
                            count++;
                        }
                        in.get(lastchar);
                    }
                    if (lastchar == ',') {
                        result.push_back({token::DATASTRING,word});
                        result.push_back({token::COMMA,""});
                        word="";
                        current_shape[current_depth]++;
                    }
                } while (lastchar != '}');
                result.push_back({token::DATASTRING,word});
                result.push_back({token::BRACECLOSE,""});
                if (shape)
                    if (shape[current_depth] < current_shape[current_depth])
                        shape[current_depth] = current_shape[current_depth];
                current_depth--;
            } else {
                switch (get_but_eat_whitespace(in)) {
                   case ',':
                    result.push_back({token::COMMA,""});
                    current_shape[current_depth]++;
                    break;
                  case '{':
                    result.push_back({token::BRACEOPEN,""});
                    current_depth++;
                    current_shape[current_depth] = 1;
                    break;
                  case '}':
                    result.push_back({token::BRACECLOSE,""});
                    if (shape)
                          if (shape[current_depth] < current_shape[current_depth])
                              shape[current_depth] = current_shape[current_depth];
                    current_depth--;
                    break;
                  default:
                    throw std::istream::failure("Format error");
                }
            }
        }
        result.push_back({token::END,""});
    }
    catch (std::istream::failure& e) {
        in.seekg(init_file_ptr, in.beg);
        in.setstate(std::ios::failbit);
        throw;
    }

    return wholeresult;
}

template<typename T, rank_type R> inline
void parse_strings(const std::pair<std::list<std::pair<token,std::string>>,size_type[R]> & tokens, typename PointerArray<T,R>::type p)
{
    size_type index[R];
    int current_depth = -1;
    for (auto& tokenpair: tokens.first) {
        switch (tokenpair.first) {
        case token::BRACEOPEN:
            current_depth++;
            index[current_depth]=1;
            break;
        case token::BRACECLOSE:
            current_depth--;
            break;
        case token::COMMA:
            index[current_depth]++;
            break;
        case token::DATASTRING:
            StringToValue<T>::get(tokenpair.second, Deref<T,R>::access(p, index));
            break;
        case token::END:
            break;
        }
        if (tokenpair.first == token::END) break;
    }
}

}

template<typename T, rank_type R> inline
std::ostream& operator<<(std::ostream &o, const rarray<T, R>& r)
{
    if (R>1) {
        return detail::text_output(o,r);
    } else if (R==1) {
        if (not r.empty()) {
            o << "{";
            for (size_type i=0; i<r.extent(0); i++)  {
                if (i>0)
                    o << ",";
                o << r.data()[i];
            }
            o << "}";
        }
    }
    return o;
}

template<typename T,rank_type R> inline
std::istream& operator>>(std::istream &in, rarray<T,R>& r)
{
    auto X = detail::parse_shape<R>(in);
    size_type* extent = X.second;
    if (detail::mul(extent,R) <= r.size())
        r.reshape(extent, RESIZE::ALLOWED);
    else
        r = rarray<T,R>(extent);
    detail::parse_strings<T,R>(X, r.ptr_array());
    return in;
}

}


//end #include "rarrayio.h"


//begin #include "rarraydelmacros.h"

#undef RA_CHECKORSAY
#undef RA_NOEXCEPT
#undef RA_FORCE_inline
#undef noboundscheck


//end #include "rarraydelmacros.h"



#define EXTENT(A,I)  ra::extent(A,I)
#define RARRAY(A)    rarray<typename std::remove_all_extents<decltype(A)>::type,std::rank<decltype(A)>::value>(A)
#define INDEX(A,X,I) RARRAY(A).index(X,I)

using ra::rarray;
using ra::linspace;
using ra::xrange;

template<typename T> using rvector = rarray<T,1>;
template<typename T> using rmatrix = rarray<T,2>;
template<typename T> using rtensor = rarray<T,3>;

#else
#error "This file requires C++11 or newer support."
#endif

#endif

